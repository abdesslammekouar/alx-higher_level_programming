================================
    How matrix_divided works
================================

It must be imported as follows to avoid a SyntaxError:

    >>> matrix_divided = __import__("2-matrix_divided").matrix_divided

It takes a matrix (list of lists) of integers/floats as an argument and a
number:

    >>> a = [[11, 22], [33, 44]]
    >>> matrix_divided(a, 100)
    [[0.11, 0.22], [0.33, 0.44]]

The results are rounded to 2 decimal places:

    >>> a = [[11.5, 22], [33.8, 44]]
    >>> matrix_divided(a, 100)
    [[0.12, 0.22], [0.34, 0.44]]

In case an argument is not a number, a TypeError is raised:

    >>> a = [[11, 22], ['text', 44]]
    >>> matrix_divided(a, 100) #doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Rows must all be of the same length:

    >>> a = [[11, 22], [33, 44, 55]]
    >>> matrix_divided(a, 100) #doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
    Traceback (most recent call last):
        ...
    TypeError: Each row of the matrix must have the same size

The divisor must be different from zero:

    >>> a = [[11, 22], [33, 44]]
    >>> matrix_divided(a, 0) #doctest: +ELLIPSIS
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero

The must be a number:

    >>> matrix_divided(a, 'text') #doctest: +ELLIPSIS
    Traceback (most recent call last):
        ...
    TypeError: div must be a number
